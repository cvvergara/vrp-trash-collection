#ifndef TABUSEARCH
#define TABUSEARCH

#include <stdexcept>
#include <limits>
#include <algorithm>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>

#include "tau.h"
#include "move.h"
#include "tabu.h"

class TabuSearch {
  public:
    // variables for Tabu Search
    int iter;

    Tau S;
    double SCost;

    Tau Best;
    double BestCost;

    std::vector<Tabu> T;
    Move bestMove;

    int tabuLength;

    bool debugTabu;
    bool debugPlots;

    TabuSearch(Solution &s) : S(s), Best(s) {
        iter = 0;
        tabuLength = 30;            // set a reasonable default
        SCost = BestCost = Best.getcost();  // cost of the best
        debugTabu = false;
        debugPlots = false;
    };

    Solution solve();

    bool doSPI();

    bool doSBR();

    bool doWRI();

    double getAverageRouteDurationLength();

    void applyMove(Move& m);

    void addMoveTabu(Move& m);

    void addTabu(Tabu& tm);

    bool isMoveTabu(Move& m);

    bool isTabu(Tabu& tm);

    void cleanTabuList();

    void dumpTabu() {
        std::cout << "Tabu List:" << std::endl;
        for (int i=0; i<T.size(); i++) {
            std::cout << i <<":  ";
            T[i].dump();
        }
    };

};

#endif
